{
    // Place your ionic-gib workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    //     "scope": "javascript,typescript",
    //     "prefix": "log",
    //     "body": [
    //         "console.log('$1');",
    //         "$2"
    //     ],
    //     "description": "Log output to console"
    // }
    "lc try..catch rethrow": {
        "scope": "javascript,typescript",
		"prefix": "lc_trycatch_rethrow",
		"body": [
			"const lc = `\\${this.lc}[\\${this.$1.name}]`;",
			"try {",
			"\t$SELECTION$0",
			"} catch (error) {",
			"\tconsole.error(`\\${lc} \\${error.message}`);",
			"\tthrow error;",
			"}"
		],
    },
    "lc try..catch..finally rethrow": {
        "scope": "javascript,typescript",
		"prefix": "lc_trycatchfinally_rethrow",
		"body": [
			"const lc = `\\${this.lc}[\\${this.$1.name}]`;",
			"try {",
			"\t$SELECTION$0",
			"} catch (error) {",
			"\tconsole.error(`\\${lc} \\${error.message}`);",
			"\tthrow error;",
			"} finally {",
			"\t$2",
			"}"
		],
    },
    "lc try..catch..finally rethrow with logging": {
        "scope": "javascript,typescript",
		"prefix": "lc_trycatchfinally_rethrow_withlogging",
		"body": [
			"const lc = `\\${this.lc}[\\${this.$1.name}]`;",
			"try {",
			"\tif (logalot) { console.log(`\\${lc} starting...`); }",
			"\t$SELECTION$0",
			"} catch (error) {",
			"\tconsole.error(`\\${lc} \\${error.message}`);",
			"\tthrow error;",
			"} finally {",
			"\tif (logalot) { console.log(`\\${lc} complete.`); }",
			"}"
		],
    },
    "func async lc try..catch rethrow": {
        "scope": "javascript,typescript",
		"prefix": "func_lc_trycatch_rethrow",
		"body": [
			"${1:export async function} ${2:fnName}({",
			"\t$3,",
			"}: {",
			"\t$3: $4,",
			"}): Promise<$5> {",
			"\tconst lc = `\\${this.lc}[\\${this.$2.name}]`;",
			"\ttry {",
			"\t\t$SELECTION$0",
			"\t} catch (error) {",
			"\t\tconsole.error(`\\${lc} \\${error.message}`);",
			"\t\tthrow error;",
			"\t}",
			"}"
		],
    },
    "func async lc try..catch..finally rethrow": {
        "scope": "javascript,typescript",
		"prefix": "func_lc_trycatchfinally_rethrow",
		"body": [
			"${1:export async function} ${2:fnName}({",
			"\t$3,",
			"}: {",
			"\t$3: $4,",
			"}): Promise<$5> {",
			"\tconst lc = `\\${this.lc}[\\${this.$2.name}]`;",
			"\ttry {",
			"\t\t$SELECTION$0",
			"\t} catch (error) {",
			"\t\tconsole.error(`\\${lc} \\${error.message}`);",
			"\t\tthrow error;",
			"\t} finally {",
			"\t\t$6",
			"\t}",
			"}"
		],
    },
    "func async lc try..catch..finally rethrow with logging": {
        "scope": "javascript,typescript",
		"prefix": "func_lc_trycatchfinally_rethrow_withlogging",
		"body": [
			"${1:export async function} ${2:fnName}({",
			"\t$3,",
			"}: {",
			"\t$3: $4,",
			"}): Promise<$5> {",
			"\tconst lc = `\\${this.lc}[\\${this.$2.name}]`;",
			"\ttry {",
			"\t\tif (logalot) { console.log(`\\${lc} starting...`); }",
			"\t\t$SELECTION$0",
			"\t} catch (error) {",
			"\t\tconsole.error(`\\${lc} \\${error.message}`);",
			"\t\tthrow error;",
			"\t} finally {",
			"\t\tif (logalot) { console.log(`\\${lc} complete.`); }",
			"\t}",
			"}"
		],
    },
    "throw new error with guid": {
        "scope": "javascript,typescript",
		"prefix": "throw_new_error_with_guid",
		"body": [
			"throw new Error(`$1 (E: $RANDOM_HEX$RANDOM_HEX$RANDOM_HEX$RANDOM_HEX$RANDOM_HEX$CURRENT_YEAR_SHORT)`); $0"
		],
    },
    "log if logalot": {
        "scope": "javascript,typescript",
		"prefix": "log_if_logalot",
		"body": [
			"if (logalot) { console.log(`\\${lc} $1 (I: $RANDOM_HEX$RANDOM_HEX$RANDOM_HEX$RANDOM_HEX$RANDOM_HEX$CURRENT_YEAR_SHORT)`); }"
		],
    },
    "surround log if logalot": {
        "scope": "javascript,typescript",
		"prefix": "surround_log_if_logalot",
		"body": [
			"if (logalot) { $SELECTION }"
		],
    },
}